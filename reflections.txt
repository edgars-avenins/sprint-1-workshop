Reflections
1.
Faster once you get the hang of it. But takes time to get used to as instead of usual GUI you have text and commands.
- just because something looks nicer doesnt mean it's the most effective way to do it.

Hard to stick to them while aiming for results you expect from yourself. I might try to play around less and stay on the path
as playing around caused problems and these problems took a bit longer then expected to deal with

Started out with- git clone "URL" - get the remote repo locally
touch "filename.type" - create a file
start "filename.type" (TAB for quick finish ofcourse)
git add -A   - add all changes
git commit -m "message"  - prepare these changes
git push  - send them to remote repo

git checkout -b "branch name" is same as
git branch "branch name"
git checkout "branch name"

I learned that there are a lot of hidden shortcuts through flags -"x"

2.

git is a tool and github is a service, they dont neceserely mean that you have to use them togehter but its a popular combination

bus card - snapper and snapper reader. You can use your snapper on more than just buses and same goes for bus readers - they dont just read snapper cards

I might remembmer most of the core things as there were few I had to really wrap my mind around, I find that these stick with me better

This time I think I managed to stick to time constraints pretty well, mainly because I skimmed over information that I was familiar with and concentrated on topics that required more information.

3.

It's a work flow that allows tracking your changes and reviewing previous versions in an easy way as well as allows multiple users work simultaneously on the same project and allows them to bring it all together in such a way that it actually works.

Read a bit of documentation, made sure to put down notes of how I understand commands, tried out these commands checked status all the time. 

Try drawing a scheme of how files travel with git commands

4. 

I will compare staging and committing to putting together your IKEA table. 
You got all your parts ready you put together small bits into bigger bits and you add them together that's staging now you wanna come it and see if it's looking alright
see you put them together even more if something is wrong you can always take a stepback fix it and then commit again. 
That's a rough comparison of how git version control works on files
You change them add them to bunch about to be saved and if necessary go back. Like using undo button in word or other programs. 
